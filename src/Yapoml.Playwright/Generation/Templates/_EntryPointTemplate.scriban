// auto-generated by {{version}}

using Microsoft.Playwright;

namespace Yapoml.Playwright
{
	public partial class YaSpace
	{
		private IPage _page;

		private Yapoml.Options.ISpaceOptions _spaceOptions;

		public YaSpace(IPage page, Yapoml.Options.ISpaceOptions spaceOptions)
		{
			_page = page;
			_spaceOptions = spaceOptions;
		}
{{ for space in spaces }}
		public {{space.namespace}}.{{space.name}}Space {{space.name}}
		{
			get
			{
				return new {{space.namespace}}.{{space.name}}Space(_page, _spaceOptions);
			}
		}
{{ end }}
{{ for page in pages }}
		public {{page.namespace}}.{{page.name}} {{page.name}}
		{
			get
			{
				return new {{page.namespace}}.{{page.name}}(_page, _spaceOptions);
			}
		}
{{ end }}
	}

	public static class YapomlExtensions
	{
		public static YaSpace Ya(this IPage page)
		{
			return page.Ya((options) => { });
		}

		public static YaSpace Ya(this IPage page, System.Action<Yapoml.Options.ISpaceOptions> spaceOptionsCallback)
		{
			var spaceOptions = new Yapoml.Options.SpaceOptions();

			// default logger
			spaceOptions.Register<Yapoml.Logging.ILogger>(new Yapoml.Logging.ConsoleLogger());

			var eventSource = new Yapoml.Playwright.Events.EventSource();
			spaceOptions.Register<Yapoml.Playwright.Events.IEventSource>(eventSource);

			var logProducer = new Yapoml.Playwright.Events.LogEventsProducer(spaceOptions);
			logProducer.Init();

			spaceOptionsCallback?.Invoke(spaceOptions);

			return new YaSpace(page, spaceOptions);
		}
	}
}