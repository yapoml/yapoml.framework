using OpenQA.Selenium;
using System.Linq;

namespace {{namespace}}
{
  public partial class {{name}} : Yapoml.Selenium.Page
  {
    public {{name}}(IWebDriver webDriver, Yapoml.Options.ISpaceOptions spaceOptions)
        : base(webDriver, spaceOptions)
    {
      
    }

    {{ for component in components}}
    public {{ if component.is_plural }}System.Collections.Generic.IList<{{component.name}}Component>{{ else }}{{component.name}}Component{{ end }} {{component.name}}
    {
      get
      {
        {{ if component.by.method == 'XPath' -}}
        var by = OpenQA.Selenium.By.XPath("{{ component.by.value }}");
        {{ end -}}

        {{ if component.by.method == 'Css' -}}
        var by = OpenQA.Selenium.By.CssSelector("{{ component.by.value }}");
        {{ end -}}

        {{ if component.by.method == 'Id' -}}
        var by = OpenQA.Selenium.By.Id("{{ component.by.value }}");
        {{ end -}}
        
        {{ if component.is_plural }}
        EventSource.RaiseOnFindingComponents("{{component.name}}", by);
        var webElements = WebDriver.FindElements(by);
        EventSource.RaiseOnFoundComponents(by, webElements);
        return webElements.Select(e => new {{component.name}}Component(WebDriver, e, SpaceOptions)).ToList();
        {{ else }}
        EventSource.RaiseOnFindingComponent("{{component.name}}", by);
        var webElement = WebDriver.FindElement(by);
        EventSource.RaiseOnFoundComponent(by, WebDriver, webElement);
        return new {{component.name}}Component(WebDriver, webElement, SpaceOptions);
        {{ end }}
      }
    }

    {{ include 'NestedComponentTemplate' component }}
    {{ end }}
  }
}